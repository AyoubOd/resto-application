{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import { createContext } from \"tailwindcss/lib/lib/setupContextUtils\";\r\nimport { generateRules } from \"tailwindcss/lib/lib/generateRules\";\r\nimport resolveConfig from \"tailwindcss/resolveConfig\";\r\nimport type { TailwindConfig } from \"tailwindcss/tailwind-config\";\r\nimport escalade from \"escalade/sync\";\r\nimport { IOption } from \"./options\";\r\nimport objectHash from \"object-hash\";\r\n\r\nlet tailwindConfig: TailwindConfig = {\r\n    theme: {},\r\n};\r\n\r\nconst contextMap = new Map();\r\n\r\nconst __defaultConfig__ = \"tailwind.config.js\";\r\n\r\nfunction bigSign(bigIntValue: number) {\r\n    const left: any = bigIntValue > 0n;\r\n    const right: any = bigIntValue < 0n;\r\n    return left - right;\r\n}\r\n\r\nexport function sortClasses(classStr: string, options: IOption = {}): string {\r\n    const tailwindConfigPath = escalade(__dirname, (dir, names) => {\r\n        if (names.includes(__defaultConfig__)) {\r\n            return __defaultConfig__;\r\n        }\r\n    });\r\n\r\n    tailwindConfig.content = [\"no-op\"];\r\n    if (tailwindConfigPath) {\r\n        tailwindConfig = require(tailwindConfigPath);\r\n    }\r\n\r\n    if (options.tailwindConfig && options.tailwindConfigPath) {\r\n        throw new Error(\r\n            \"You can not specify tailwinfConfig or tailwinfConfigPath. Please specify either one.\"\r\n        );\r\n    }\r\n\r\n    if (options.tailwindConfigPath) {\r\n        tailwindConfig = require(options.tailwindConfigPath);\r\n    }\r\n\r\n    if (options.tailwindConfig) {\r\n        tailwindConfig = options.tailwindConfig;\r\n    }\r\n\r\n    let context;\r\n    const existing = contextMap.get(tailwindConfigPath);\r\n    const hash = objectHash(tailwindConfig);\r\n\r\n    if (existing && existing.hash === hash) {\r\n        context = existing.context;\r\n    } else {\r\n        context = createContext(resolveConfig(tailwindConfig));\r\n        contextMap.set(tailwindConfigPath, { context, hash });\r\n    }\r\n\r\n    const parts: string[] = classStr\r\n        .split(/\\s+/)\r\n        .filter((x) => x !== \"\" && x !== \"|\");\r\n\r\n    const unknownClassNames: string[] = [];\r\n    const knownClassNamesWithOrder: (string | number)[][] = [];\r\n\r\n    for (const className of parts) {\r\n        let order: number | null;\r\n\r\n        const ruleOrder = generateRules(new Set([className]), context).sort(\r\n            ([a], [z]) => bigSign(z - a)\r\n        )[0];\r\n\r\n        if (ruleOrder) {\r\n            order = ruleOrder[0];\r\n        } else {\r\n            order = null;\r\n        }\r\n\r\n        if (order) {\r\n            knownClassNamesWithOrder.push([className, order]);\r\n        } else {\r\n            unknownClassNames.push(className);\r\n        }\r\n    }\r\n\r\n    const knownClassNames = knownClassNamesWithOrder\r\n        .sort(([, a]: any, [, z]: any) => (a === z ? 0 : bigSign(a - z)))\r\n        .map(([className]) => className);\r\n\r\n    return [...unknownClassNames, ...knownClassNames].join(\" \");\r\n}\r\n"],
  "mappings": "qrBAAA,wCAA8B,iDAC9B,EAA8B,6CAC9B,EAA0B,wCAE1B,EAAqB,4BAErB,EAAuB,0BAEnB,EAAiC,CACjC,MAAO,IAGL,EAAa,GAAI,KAEjB,EAAoB,qBAE1B,WAAiB,EAAqB,CAClC,GAAM,GAAY,EAAc,GAC1B,EAAa,EAAc,GACjC,MAAO,GAAO,EAGX,WAAqB,EAAkB,EAAmB,GAAY,CACzE,GAAM,GAAqB,cAAS,UAAW,CAAC,EAAK,IAAU,CAC3D,GAAI,EAAM,SAAS,GACf,MAAO,KASf,GALA,EAAe,QAAU,CAAC,SACtB,GACA,GAAiB,QAAQ,IAGzB,EAAQ,gBAAkB,EAAQ,mBAClC,KAAM,IAAI,OACN,wFAIR,AAAI,EAAQ,oBACR,GAAiB,QAAQ,EAAQ,qBAGjC,EAAQ,gBACR,GAAiB,EAAQ,gBAG7B,GAAI,GACE,EAAW,EAAW,IAAI,GAC1B,EAAO,cAAW,GAExB,AAAI,GAAY,EAAS,OAAS,EAC9B,EAAU,EAAS,QAEnB,GAAU,oBAAc,cAAc,IACtC,EAAW,IAAI,EAAoB,CAAE,UAAS,UAGlD,GAAM,GAAkB,EACnB,MAAM,OACN,OAAO,AAAC,GAAM,IAAM,IAAM,IAAM,KAE/B,EAA8B,GAC9B,EAAkD,GAExD,OAAW,KAAa,GAAO,CAC3B,GAAI,GAEE,EAAY,oBAAc,GAAI,KAAI,CAAC,IAAa,GAAS,KAC3D,CAAC,CAAC,GAAI,CAAC,KAAO,EAAQ,EAAI,IAC5B,GAEF,AAAI,EACA,EAAQ,EAAU,GAElB,EAAQ,KAGZ,AAAI,EACA,EAAyB,KAAK,CAAC,EAAW,IAE1C,EAAkB,KAAK,GAI/B,GAAM,GAAkB,EACnB,KAAK,CAAC,CAAC,CAAE,GAAS,CAAC,CAAE,KAAa,IAAM,EAAI,EAAI,EAAQ,EAAI,IAC5D,IAAI,CAAC,CAAC,KAAe,GAE1B,MAAO,CAAC,GAAG,EAAmB,GAAG,GAAiB,KAAK",
  "names": []
}
